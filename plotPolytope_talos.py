
import mpl_toolkits.mplot3d as a3
import pylab as pl
from scipy.spatial import ConvexHull

import matplotlib.pyplot as plt #Matplotlib
from mpl_toolkits.mplot3d import Axes3D

import numpy as np

from wavefront import *

def plotPolyhedron(hull, ax, color = "r", alpha = 0.1):
    for s in hull.simplices:
        tri = a3.art3d.Poly3DCollection(hull.points[s], alpha = alpha)
        tri.set_color(color)
        tri.set_edgecolor('k')
        ax.add_collection3d(tri)
    return ax

def plotPoint(point,ax, color = "g", alpha = 1):
    ax.scatter(point[0], point[1], point[2], c=color, marker='o', linewidth = 10) 

#load obj
folderpath = '/home/jiayu/Desktop/talos-rbprm/share/talos-rbprm/relative_effector_positions/'
lf_in_rf_points = load_obj(folderpath+'talos_LF_constraints_in_RF_quasi_flat_REDUCED.obj')
rf_in_lf_points = load_obj(folderpath+'talos_RF_constraints_in_LF_quasi_flat_REDUCED.obj')

folderpath = '/home/jiayu/Desktop/talos-rbprm/share/talos-rbprm/com_inequalities/feet_quasi_flat/'
com_in_lf = load_obj(folderpath+'talos_COM_constraints_in_LF_effector_frame_REDUCED.obj')
com_in_rf = load_obj(folderpath+'talos_COM_constraints_in_RF_effector_frame_REDUCED.obj')

hull_lf_in_rf = ConvexHull(lf_in_rf_points.vertices)
hull_rf_in_lf = ConvexHull(rf_in_lf_points.vertices)
hull_com_in_lf = ConvexHull(com_in_lf.vertices + np.array([0,0,0.105]))
hull_com_in_rf = ConvexHull(com_in_rf.vertices + np.array([0,0,0.105]))

fig=plt.figure()
ax = Axes3D(fig)

plotPolyhedron(hull_lf_in_rf, ax, color = "r", alpha = 0.1)
plotPolyhedron(hull_rf_in_lf, ax, color = "b", alpha = 0.1)
plotPolyhedron(hull_com_in_lf, ax, color = "m", alpha = 0.1)
plotPolyhedron(hull_com_in_rf, ax, color = "y", alpha = 0.1)

#load constraints
from sl1m.problem_definition import *
from sl1m.planner_scenarios.talos.constraints import *

K_CoM_Right,k_CoM_Right = right_foot_constraints(np.array([[1.0,0.0,0.0,0.0],[0.0,1.0,0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]))
K_CoM_Left,k_CoM_Left = left_foot_constraints(np.array([[1.0,0.0,0.0,0.0],[0.0,1.0,0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]))

Q_rf_in_lf,q_rf_in_lf = right_foot_in_lf_frame_constraints(np.array([[1.0,0.0,0.0,0.0],[0.0,1.0,0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]))
Q_lf_in_rf,q_lf_in_rf = left_foot_in_rf_frame_constraints(np.array([[1.0,0.0,0.0,0.0],[0.0,1.0,0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]))

#-----------------------------------
#Sample points
#randompoints = np.random.rand(10, 3) 
xtick = np.linspace(-1,1,20)
ytick = np.linspace(-1,1,20)
ztick = np.linspace(-1,1,20)
#xtick = np.array([0])
#ytick = np.array([0])
#ztick = np.array([0.8])
np.set_printoptions(precision=4)

#print(randompoints)

for xpoint in xtick:
    for ypoint in ytick:
        for zpoint in ztick:
            pointTemp = np.concatenate((xpoint,ypoint,zpoint),axis=None)
            indicators = K_CoM_Left@pointTemp<=k_CoM_Left
            lampedindicator = True
            for indicator in indicators:
                if indicator == False:
                    lampedindicator = False
            if lampedindicator == True:
                plotPoint(pointTemp,ax, color = "g", alpha = 1)
#for randpoint in randompoints:
#    x_temp = -1 + randpoint[0]*2
#    y_temp = -1 + randpoint[1]*2
#    z_temp = 0 + randpoint[1]*1.5

#    scalepoint = np.concatenate((x_temp,y_temp,z_temp),axis=None)

#    #print(scalepoint)
#------------------------------------------


#Test a single point
Lfoot_pos = np.array([0,0.2,0])
Rfoot_pos = np.array([0,-0.2,0])

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()


#Load  
#lf_in_rf_points = 
#np.array([[0.309961,0.800311,0.006626],
#[-0.042532,0.728959,-0.277092],
#[-0.204739,0.785187,-0.194369],
#[0.163816,0.900633,0.274600],
#[-0.326193,0.293722,-0.450179],
#[-0.290104,0.190606,-0.475631],
#[-0.323395,0.201466,-0.372144],
#[-0.318240,0.296456,0.500298],
#[-0.323902,0.873649,0.563283],
#[-0.325758,0.185694,0.251725],
#[-0.296636,0.639755,-0.382398],
#[-0.276093,0.440533,-0.522028],
#[0.170417,0.368876,-0.564590],
#[-0.046029,0.344797,-0.559881],
#[0.302679,0.226204,-0.313885],
#[0.316714,0.222618,-0.245047],
#[0.321054,0.184809,0.036949],
#[0.259631,0.241383,-0.495101],
#[0.322192,0.412583,-0.387172],
#[0.327981,0.188394,0.097360],
#[0.323458,0.825942,0.104246],
#[0.216139,0.884025,0.328076],
#[0.099770,0.877321,0.471264],
#[0.114758,0.794634,0.610727],
#[0.302292,0.711536,0.539728],
#[-0.313732,0.182866,-0.057566],
#[0.099285,0.647921,0.617583],
#[-0.145435,0.558858,0.614339],
#[0.276530,0.223744,0.567556],
#[-0.272490,0.188464,0.392388]])
#
#rf_in_lf_points = np.array([[-0.315717,-0.189447,-0.075045],
#[-0.316097,-0.477041,-0.457372],
#[-0.318636,-0.258711,0.500236],
#[-0.060798,-0.389734,-0.673594],
#[-0.104032,-0.585113,-0.573917],
#[-0.175744,-0.538260,-0.608216],
#[-0.255646,-0.354604,-0.581284],
#[0.278307,-0.256619,0.437545],
#[0.283981,-0.185612,0.387452],
#[-0.225588,-0.184966,0.500152],
#[0.157596,-0.248020,-0.581029],
#[0.221555,-0.573481,-0.408854],
#[0.318993,-0.286385,0.384315],
#[0.324409,-0.195788,0.061247],
#[-0.310169,-0.346221,-0.509742],
#[-0.294903,-0.205896,-0.378054],
#[0.196852,-0.180381,-0.489950],
#[0.292010,-0.181846,-0.317769],
#[0.304342,-0.576528,-0.284838],
#[0.299100,-0.832487,0.310836],
#[0.315113,-0.259115,-0.378870],
#[-0.273470,-0.850701,0.210493],
#[-0.313807,-0.838394,0.222548],
#[0.317610,-0.762291,0.513917],
#[-0.311802,-0.618950,0.538435],
#[0.299116,-0.250973,-0.458221],
#[-0.007460,-0.760086,-0.268260],
#[-0.231538,-0.917320,0.371109],
#[0.150214,-0.888616,0.173444],
#[0.074152,-0.912322,0.346961],
#[-0.285990,-0.840699,0.459188]])
#
#com_in_lf = np.array([
#[-0.771961,-0.220100,0.340886],
#[0.468488,-0.294134,0.443468],
#[-0.508327,-0.419880,0.669492],
#[-0.717610,-0.228508,0.583043],
#[-0.564214,-0.236258,0.829571],
#[-0.646388,-0.036936,0.779969],
#[-0.524629,-0.136841,0.924610],
#[-0.813536,-0.051146,0.391921],
#[0.619806,-0.004938,0.706450],
#[0.563763,-0.020915,0.433749],
#[0.442231,0.023439,0.548244],
#[0.591956,-0.026680,0.827795],
#[0.480741,0.026215,0.886168],
#[0.640538,-0.162132,0.569433],
#[-0.250361,-0.244353,1.029513],
#[-0.490440,-0.188501,0.928836],
#[0.090747,-0.265836,1.051106],
#[0.443672,-0.375567,0.702309],
#[0.353661,-0.304828,0.903122],
#[-0.243367,-0.226528,1.035051],
#[0.064931,-0.042584,1.077078],
#[0.612067,-0.281967,0.487917],
#[-0.766870,0.041182,0.323625],
#[0.421432,0.048969,0.863399],
#[0.333842,-0.253153,0.976829],
#[0.409360,-0.159422,0.974145],
#[0.324541,-0.030077,1.016397],
#[0.620278,-0.152411,0.687036],
#[0.209236,-0.137034,1.059685],
#[-0.454874,0.013537,0.978780],
#[0.478551,-0.203808,0.897281],
#[-0.621492,0.030284,0.766164],
#[-0.183039,0.042892,1.019722],
#[0.577386,-0.251809,0.743933],
#[-0.782787,0.017294,0.460098],
#[-0.061083,0.040468,1.046608]
#])

#com_in_rf = np.array([[0.620285,0.291967,0.632786],
#[0.417405,0.142919,0.328620],
#[0.513849,0.336769,0.650566],
#[0.477939,0.274896,0.874863],
#[0.647089,0.112693,0.699607],
#[-0.720861,0.218553,0.396644],
#[-0.669698,0.282514,0.519054],
#[-0.450046,0.327329,0.827699],
#[0.137979,0.226373,1.057303],
#[0.334383,0.070777,1.009706],
#[-0.740770,0.210861,0.543518],
#[-0.776648,0.077067,0.404342],
#[0.636395,-0.040284,0.643199],
#[0.587908,0.072656,0.774033],
#[0.401611,-0.012749,0.858633],
#[-0.060136,-0.027755,1.060663],
#[-0.142074,-0.026648,1.071049],
#[-0.716516,-0.013876,0.567327],
#[0.403107,0.299932,0.943485],
#[-0.733100,0.061681,0.606845],
#[-0.650711,0.175803,0.784998],
#[-0.669705,0.274900,0.623852],
#[-0.488603,0.284942,0.870313],
#[0.461412,0.008199,0.396047],
#[0.115319,-0.035534,0.959361],
#[-0.670324,-0.031051,0.655123],
#[-0.440980,-0.041442,0.936769],
#[-0.417148,0.246614,0.968573],
#[-0.436416,0.137212,0.980089],
#[0.448731,0.133943,0.949939],
#[0.021409,0.267722,1.041373],
#[0.285294,0.079032,0.335878],
#[-0.543912,0.000475,0.897135],
#[-0.308403,-0.040146,1.013818],
#[0.008499,0.234884,1.062614],
#[-0.256917,0.146839,1.053392],
#[0.137201,0.288875,1.008677],
#[-0.394509,0.176219,0.993326],
#[-0.268222,0.256203,1.021756],
#[-0.078739,0.222290,1.066180]])
