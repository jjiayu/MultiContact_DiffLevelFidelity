
import mpl_toolkits.mplot3d as a3
import pylab as pl
from scipy.spatial import ConvexHull

import matplotlib.pyplot as plt #Matplotlib
from mpl_toolkits.mplot3d import Axes3D

import numpy as np

def plotPolyhedron(hull, ax, color = "r", alpha = 0.1):
    for s in hull.simplices:
        tri = a3.art3d.Poly3DCollection(hull.points[s], alpha = alpha)
        tri.set_color(color)
        tri.set_edgecolor('k')
        ax.add_collection3d(tri)
    return ax

def plotPoint(point,ax, color = "g", alpha = 1):
    ax.scatter(point[0], point[1], point[2], c=color, marker='o', linewidth = 10) 

#Load  
lf_in_rf_points = np.array([[0.309961,0.800311,0.006626],
[-0.042532,0.728959,-0.277092],
[-0.204739,0.785187,-0.194369],
[0.163816,0.900633,0.274600],
[-0.326193,0.293722,-0.450179],
[-0.290104,0.190606,-0.475631],
[-0.323395,0.201466,-0.372144],
[-0.318240,0.296456,0.500298],
[-0.323902,0.873649,0.563283],
[-0.325758,0.185694,0.251725],
[-0.296636,0.639755,-0.382398],
[-0.276093,0.440533,-0.522028],
[0.170417,0.368876,-0.564590],
[-0.046029,0.344797,-0.559881],
[0.302679,0.226204,-0.313885],
[0.316714,0.222618,-0.245047],
[0.321054,0.184809,0.036949],
[0.259631,0.241383,-0.495101],
[0.322192,0.412583,-0.387172],
[0.327981,0.188394,0.097360],
[0.323458,0.825942,0.104246],
[0.216139,0.884025,0.328076],
[0.099770,0.877321,0.471264],
[0.114758,0.794634,0.610727],
[0.302292,0.711536,0.539728],
[-0.313732,0.182866,-0.057566],
[0.099285,0.647921,0.617583],
[-0.145435,0.558858,0.614339],
[0.276530,0.223744,0.567556],
[-0.272490,0.188464,0.392388]])

rf_in_lf_points = np.array([[-0.315717,-0.189447,-0.075045],
[-0.316097,-0.477041,-0.457372],
[-0.318636,-0.258711,0.500236],
[-0.060798,-0.389734,-0.673594],
[-0.104032,-0.585113,-0.573917],
[-0.175744,-0.538260,-0.608216],
[-0.255646,-0.354604,-0.581284],
[0.278307,-0.256619,0.437545],
[0.283981,-0.185612,0.387452],
[-0.225588,-0.184966,0.500152],
[0.157596,-0.248020,-0.581029],
[0.221555,-0.573481,-0.408854],
[0.318993,-0.286385,0.384315],
[0.324409,-0.195788,0.061247],
[-0.310169,-0.346221,-0.509742],
[-0.294903,-0.205896,-0.378054],
[0.196852,-0.180381,-0.489950],
[0.292010,-0.181846,-0.317769],
[0.304342,-0.576528,-0.284838],
[0.299100,-0.832487,0.310836],
[0.315113,-0.259115,-0.378870],
[-0.273470,-0.850701,0.210493],
[-0.313807,-0.838394,0.222548],
[0.317610,-0.762291,0.513917],
[-0.311802,-0.618950,0.538435],
[0.299116,-0.250973,-0.458221],
[-0.007460,-0.760086,-0.268260],
[-0.231538,-0.917320,0.371109],
[0.150214,-0.888616,0.173444],
[0.074152,-0.912322,0.346961],
[-0.285990,-0.840699,0.459188]])

com_in_lf = np.array([
[-0.187346,0.500264,0.798713],
[-0.325236,0.177690,-0.231329],
[-0.393892,0.436393,0.824931],
[0.182928,0.508214,0.889948],
[-0.222660,0.470423,0.904970],
[-0.301839,0.099770,-0.272811],
[0.763874,-0.361843,0.540620],
[0.556275,-0.513306,0.585942],
[0.797874,-0.232186,0.639467],
[0.678107,-0.380054,0.672954],
[0.799678,-0.333264,0.501772],
[0.601565,0.375900,0.677429],
[0.501422,0.413019,0.768580],
[0.642853,0.222879,0.854398],
[0.802196,0.278997,0.434904],
[0.824922,0.250490,0.499168],
[0.794786,0.090033,0.086879],
[-0.717465,-0.079265,-0.063601],
[-0.431839,-0.057677,-0.284796],
[-0.458821,-0.193145,-0.219779],
[0.919501,-0.010432,0.356487],
[0.901371,0.022041,0.205730],
[0.860677,-0.194880,0.490703],
[0.912722,0.116086,0.342138],
[0.891369,0.123773,0.474326],
[-0.535766,-0.505321,0.629655],
[-0.142594,-0.619027,0.613906],
[-0.615018,-0.461138,0.631472],
[-0.737681,-0.317183,0.219902],
[-0.771948,-0.302469,0.311003],
[-0.385912,-0.323207,-0.155979],
[-0.800784,-0.063041,0.076699],
[0.067115,0.359008,1.028344],
[0.338360,0.023754,1.042600],
[0.532032,-0.148274,0.928162],
[0.470569,-0.307971,0.914134],
[-0.015445,-0.450999,0.966547],
[-0.440121,-0.401619,0.897135],
[-0.858801,-0.142628,0.351026],
[-0.857221,0.076754,0.324281],
[-0.859695,-0.027441,0.375072],
[0.813527,-0.312712,0.297047],
[0.762214,-0.352988,0.250253],
[0.651460,-0.071196,-0.024457],
[0.742657,-0.105149,0.055480],
[-0.195058,-0.285293,-0.183426],
[0.130890,-0.228856,1.036582],
[0.246424,-0.220134,1.014680],
[-0.100867,-0.333102,1.011615],
[0.103272,-0.388875,0.992005],
[-0.167516,-0.544873,0.826188],
[-0.628562,0.040016,-0.141138],
[-0.556543,0.127059,-0.154278],
[-0.786354,0.059574,0.056584],
[-0.630110,0.137456,-0.063151],
[0.117387,0.493303,0.925142],
[-0.806200,0.070725,0.101580],
[-0.789360,0.234166,0.476331],
[0.174636,-0.586925,0.863596],
[-0.118582,-0.050629,-0.306443],
[-0.514677,0.333418,0.885918],
[-0.535485,0.027721,0.918059],
[-0.224224,0.051221,1.049041],
[-0.074137,0.166445,1.062534],
[0.816547,-0.077206,0.645420],
[-0.732727,0.105369,0.715161],
[-0.695058,-0.160549,0.758455],
[-0.800101,0.097102,0.564558],
[-0.692048,-0.310523,0.713779],
[-0.676066,-0.292289,0.751587],
[-0.313324,-0.099626,-0.319762],
[0.895107,0.143168,0.309222],
[-0.315815,-0.335891,0.966072],
[-0.520588,0.375611,0.798232]
])

com_in_rf = np.array([
[0.794736,0.346471,0.358995],
[0.605993,0.506124,0.634431],
[0.752218,0.383575,0.607327],
[0.893524,0.208036,0.213432],
[0.585205,0.508327,0.457866],
[0.143280,0.030711,1.068169],
[0.358633,0.019787,1.024200],
[-0.020584,-0.075580,1.089780],
[0.578415,-0.167345,0.899010],
[0.390786,-0.291405,0.968387],
[0.373473,-0.388771,0.924215],
[0.531018,-0.417167,0.774082],
[0.775124,-0.178513,0.709777],
[0.631557,0.322107,0.831702],
[-0.246893,0.293685,1.010255],
[-0.003295,0.509801,0.971373],
[-0.484881,0.504807,0.782659],
[-0.623969,0.065112,0.859206],
[-0.804372,0.156461,0.604173],
[-0.694021,-0.299272,0.759256],
[-0.400436,-0.146803,0.996654],
[-0.445594,0.172432,0.972618],
[0.875557,-0.025409,0.570189],
[0.815255,-0.264750,0.528084],
[0.925887,0.081197,0.391346],
[0.841098,0.148534,0.598785],
[-0.491153,0.307367,-0.057176],
[-0.381618,0.145679,-0.272229],
[-0.669941,0.096619,-0.100424],
[-0.727495,0.239034,0.098743],
[-0.333488,0.357869,-0.070760],
[-0.682966,0.461020,0.499568],
[-0.328548,0.202555,-0.246688],
[-0.122304,-0.318988,1.021796],
[-0.291102,-0.458356,0.887809],
[-0.152091,-0.215815,1.045214],
[0.138005,-0.386152,0.998638],
[0.812524,-0.255806,0.396203],
[-0.269100,-0.149672,-0.235421],
[-0.121335,-0.119454,-0.249738],
[0.860776,-0.145591,0.178317],
[0.161878,0.566177,0.884174],
[-0.244471,0.106536,-0.301645],
[-0.733802,0.366966,0.569816],
[0.841981,0.135564,0.077877],
[0.767152,0.011423,0.021619],
[0.914657,0.094083,0.217250],
[0.778944,0.167593,0.042199],
[0.235410,-0.476908,0.856863],
[-0.501273,-0.325272,0.904081],
[-0.827022,-0.161398,0.549363],
[-0.849119,-0.203979,0.414571],
[-0.645192,-0.394925,0.698038],
[-0.508559,-0.390513,0.854191],
[-0.176374,-0.035762,-0.294059],
[-0.642430,-0.030202,-0.117070],
[-0.538033,0.050656,-0.203784],
[-0.793355,-0.007956,0.071750],
[-0.609373,-0.407461,0.658709],
[-0.569293,-0.139151,-0.151185],
[-0.814211,0.265535,0.428739],
[0.698480,0.255068,0.075103],
[-0.799570,0.252230,0.231428],
[0.918838,-0.017386,0.333439],
[0.900262,-0.128804,0.376488],
[-0.845388,0.065246,0.184448],
[0.037922,0.595003,0.778008],
[-0.336269,0.550959,0.533693],
[-0.387690,0.559597,0.707935],
[0.516381,0.468649,0.780229],
[0.091862,-0.443465,0.939739],
[-0.259729,0.534822,0.845279],
[-0.545932,0.449110,0.776731]
])

#hull_lf_in_rf = ConvexHull(lf_in_rf_points)
#hull_rf_in_lf = ConvexHull(rf_in_lf_points)
#hull_com_in_lf = ConvexHull(com_in_lf)
#hull_com_in_rf = ConvexHull(com_in_rf)

fig=plt.figure()
ax = Axes3D(fig)

#plotPolyhedron(hull_lf_in_rf, ax, color = "r", alpha = 0.1)
#plotPolyhedron(hull_rf_in_lf, ax, color = "b", alpha = 0.1)
#plotPolyhedron(hull_com_in_lf, ax, color = "m", alpha = 0.1)
#plotPolyhedron(hull_com_in_rf, ax, color = "y", alpha = 0.1)

#load constraints
from sl1m.problem_definition import *
from sl1m.planner_scenarios.talos.constraints import *

K_CoM_Right,k_CoM_Right = right_foot_constraints(np.array([[1.0,0.0,0.0,0.0],[0.0,1.0,0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]))
K_CoM_Left,k_CoM_Left = left_foot_constraints(np.array([[1.0,0.0,0.0,0.0],[0.0,1.0,0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]))

Q_rf_in_lf,q_rf_in_lf = right_foot_in_lf_frame_constraints(np.array([[1.0,0.0,0.0,0.0],[0.0,1.0,0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]))
Q_lf_in_rf,q_lf_in_rf = left_foot_in_rf_frame_constraints(np.array([[1.0,0.0,0.0,0.0],[0.0,1.0,0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]]))

#Lfoot_pos = np.array([0,0.2,0])
#Rfoot_pos = np.array([0,-0.2,0])

#-----------------------------------
##Sample points
##randompoints = np.random.rand(10, 3) 
#xtick = np.linspace(-1,1,40)
#ytick = np.linspace(-1,1,40)
#ztick = np.linspace(-1,1,40)
##xtick = np.array([0])
##ytick = np.array([0])
##ztick = np.array([0.8])
#np.set_printoptions(precision=4)
#
##print(randompoints)
#
#for xpoint in xtick:
#    for ypoint in ytick:
#        for zpoint in ztick:
#            pointTemp = np.concatenate((xpoint,ypoint,zpoint),axis=None)
#            indicators = K_CoM_Left@pointTemp<=k_CoM_Left
#            lampedindicator = True
#            for indicator in indicators:
#                if indicator == False:
#                    lampedindicator = False
#            if lampedindicator == True:
#                plotPoint(pointTemp,ax, color = "g", alpha = 1)
##for randpoint in randompoints:
##    x_temp = -1 + randpoint[0]*2
##    y_temp = -1 + randpoint[1]*2
##    z_temp = 0 + randpoint[1]*1.5
#
##    scalepoint = np.concatenate((x_temp,y_temp,z_temp),axis=None)
#
##    #print(scalepoint)
#------------------------------------------

#Shift the polytopes
Lfoot_pos = np.array([0.9268,0.1333,0])
Rfoot_pos = np.array([0.6,-0.1,0])
CoM_pos = np.array([0.7884,-1.0645e-03,0.7494])

lf_in_rf_points = lf_in_rf_points + Rfoot_pos
rf_in_lf_points = rf_in_lf_points + Lfoot_pos
com_in_lf = com_in_lf + Lfoot_pos
com_in_rf = com_in_rf + Rfoot_pos

hull_lf_in_rf = ConvexHull(lf_in_rf_points)
hull_rf_in_lf = ConvexHull(rf_in_lf_points)
hull_com_in_lf = ConvexHull(com_in_lf)
hull_com_in_rf = ConvexHull(com_in_rf)

plotPolyhedron(hull_lf_in_rf, ax, color = "r", alpha = 0.1)
plotPolyhedron(hull_rf_in_lf, ax, color = "b", alpha = 0.1)
plotPolyhedron(hull_com_in_lf, ax, color = "m", alpha = 0.1)
plotPolyhedron(hull_com_in_rf, ax, color = "y", alpha = 0.1)


plotPoint(CoM_pos,ax, color = "g", alpha = 1)
plotPoint(Lfoot_pos,ax, color = "r", alpha = 1)
plotPoint(Rfoot_pos,ax, color = "b", alpha = 1)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()